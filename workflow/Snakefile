import os
import glob
import sys
import platform
import pandas as pd
import snakemake
import json

#from snakemake import glob_wildcards
from scripts.utility.parse_sample_list import parse_sample_list
#from snakemake.utils import min_version, validate
#from snakemake.exceptions import WorkflowError


configfile: "config/config.yml"
workdir: config["workdir"]
outdir = config["outdir"]

# Create & format relative output directory
if not (os.path.exists(outdir) and os.path.exists(os.path.join(outdir, ".vomix"))):
  os.makedirs(os.path.join(outdir, ".vomix"), exist_ok=True)
if outdir.endswith(os.sep):
  outdir = outdir.rstrip(os.sep)


def relpath(f):
  """Function to redirect to output directory. 
  This allows the snakemake to be flexible and process 
  multiple datasets at once"""
  p = os.path.join(outdir, f)
  return p

### Set temporary dir
#if not os.getenv("TMPDIR"):
#  os.environ["TMPDIR"] = "tmp"
#  os.makedirs(os.environ["TMPDIR"], exist_ok=True)

### Make .vomix config directory 

### Set wildcard constraints
wildcard_constraints:
  sample_id = "[A-Za-z0-9_\-\.]+"


### Parse sample python dictionary
### It has the format samples[sample_name]  =  {'R1': 'path to R1',
#                                               'R2': 'path to R2',
#                                               'accession': 'accession id'}

samples, assemblies = parse_sample_list(config["samplelist"], config['datadir'], outdir)

### Include rules
include: "rules/preprocessing.smk"
include: "rules/assembly.smk"

if config["module"] == "viral-contig-ident" or config["module"] == "end-to-end":
  include: "rules/viralcontigident.smk"
  include: "rules/checkv.smk"
  include: "rules/clustering-fast.smk"

if config["module"] == "taxonomy" or config["module"] == "end-to-end":
  include: "rules/taxonomy.smk"

include: "rules/viral-binning.smk"
include: "rules/abundance.smk"



### Rule all directive
if config["module"] == "":
  print('Please select a module using snakemake --config module="{module}" (e.g. "end-to-end", "taxonomy", "viral-contig-ident")')
  sys.exit(1)


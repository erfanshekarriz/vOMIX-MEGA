import os
import glob
import sys
import platform
import pandas as pd
import snakemake

#from snakemake import glob_wildcards
from scripts.utility.parse_sample_list import parse_sample_list
#from snakemake.utils import min_version, validate
#from snakemake.exceptions import WorkflowError


configfile: "config/config.yml"
workdir: config["workdir"]
outdir = config["outdir"]

def relpath(f):
  """Function to redirect to output directory. 
  This allows the snakemake to be flexible and process 
  multiple datasets at once"""
  p = os.path.join(outdir, f)
  return p

### Set temporary dir
if not os.getenv("TMPDIR"):
  os.environ["TMPDIR"] = "tmp"
  os.makedirs(os.environ["TMPDIR"], exist_ok=True)


### Set wildcard constraints
wildcard_constraints:
  sample_id = "[A-Za-z0-9_\-\.]+"


### Parse sample python dictionary
### It has the format samples[sample_name]  =  {'R1': 'path to R1',
#                                               'R2': 'path to R2',
#                                               'accession': 'accession id'}

samples, assemblies = parse_sample_list(config["samplelist"], config['datadir'])

### Include rules
#include: "rules/preprocessing.smk"
include: "rules/assembly.smk"

#if config["module"] == "viral-contig-ident" or config["module"] == "end-to-end":
  #include: "rules/viralcontigident.smk"
  #include: "rules/checkv.smk"
  #include: "rules/clustering-fast.smk"

if config["module"] == "taxonomy" or config["module"] == "end-to-end":
  include: "rules/taxonomy.smk"

include: "rules/viral-binning.smk"
include: "rules/abundance.smk"

# Induce modules with flags
#include: "rules/clustering-fast.smk"
#include: "rules/clustering-sensitive.smk"


#### Set output targets based on sample names
#preprocess = expand(relpath("preprocess/{sample_id}/output/{sample_id}_R{i}_cut.trim.filt.fastq.gz"), sample_id = samples.keys(), i=[1, 2])
#preprocess += ["workflow/report/preprocess/preprocess_report.html"]
#assembly = expand(relpath("assembly/{sample_id}/output/{sample_id}_R{i}.fastq.gz"), sample_id = samples.keys(), i=[1, 2])
#assembly += ["workflow/report/assembly/assemblystats.tsv"]
#viralcontigident = expand(relpath("viralcontigident/samples/{sample_id}/output/viral.contigs.fa"), sample_id = sample_ids)
#viralcontigident += [relpath("viralcontigident/output/checkv/viruses.fna")]
#clustering = [relpath("viralcontigident/output/derep/combined.viralcontigs.derep.fa")]
#checkv = [relpath("viralcontigident/output/checkv/tmp/hmmsearch_checkpoint")]
#taxonomy = [relpath("taxonomy/viral/output/merged_taxonomy.csv")]
#abundance = [relpath("abundance/output/vOTU_table_tmp.csv")] 


### Rule all directive
if config["module"] == "":
  print('Please select a module using snakemake --config module="{module}" (e.g. "end-to-end", "taxonomy", "viral-contig-ident")')
  sys.exit(1)

#inputs = []
#if config["module"] == "end-to-end":
#  inputs = [preprocess, assembly, viralcontigident, clustering, abundance, checkv]
#elif config["module"] == "viral-contig-ident":
#  inputs = viralcontigident
#elif config["module"] == "taxonomy":
#  inputs = taxonomy

#rule all:
#  input: inputs

### Set master rules
#rule preprocess:
#  input: preprocess
#rule assembly:
#  input: assembly
#rule viralcontigident:
#  input: viralcontigident
#rule clustering:
#  input: clustering
#rule taxonomy:
#  input: taxonomy

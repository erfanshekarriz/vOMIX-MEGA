import os
import glob
import sys
import platform
import pandas as pd
import snakemake
import json
import datetime

from scripts.utility.parse_sample_list import parse_sample_list

from rich.console import Console
from rich.progress import Progress
from rich.layout import Layout
from rich.panel import Panel
console = Console()

configfile: "config/config.yml"
workdir: config["workdir"]
outdir = config["outdir"]
email = config["email"]

# Important utility functions

def cleanpath(f):
  """Function to clean the backlash at the end of directory path.
  Makes sure that all 'os.path.join's are consistent"""
  if f.endswith(os.sep):
    fi = f.rstrip(os.sep)
    return fi 
  else:
    return f 

def relpath(f):
  """Function to redirect all output to a relative path.
  This allows the snakemake to be flexible and process 
  multiple datasets at once without locking.""" 
  p = os.path.join(outdir, f)
  return p


# Create & format relative output directory
outdir = cleanpath(outdir) 
if not (os.path.exists(outdir) and os.path.exists(os.path.join(outdir, ".vomix"))):
  os.makedirs(os.path.join(outdir, ".vomix"), exist_ok=True)


### Set temporary dir
#if not os.getenv("TMPDIR"):
#  os.environ["TMPDIR"] = "tmp"
#  os.makedirs(os.environ["TMPDIR"], exist_ok=True)


### Set wildcard constraints
wildcard_constraints:
  sample_id = "[A-Za-z0-9_-]+"


datadir = cleanpath(config['datadir']) 
assembler = config["assembler"]
os.makedirs(datadir, exist_ok=True)

# DO A FEW CHECKS
if assembler not in ["megahit", "spades"]:
  console.print(Panel.fit("""Assembler '{}' does not exists. Currently 'megahit' and 'spades' are supported and their parameters can be defined in the config.yml file. Default assembler is 'megahit'""".format(assembler), title="Error", subtitle="Wrong Assembler"))
  sys.exit(1)

if not isinstance(config['cores'], int):
  console.print(Panel.fit(f"config['cores'] is not an integer: {config['cores']}, you can change the parameter in config/config.yml file", title="Error", subtitle="config['cores'] not integer"))
  sys.exit(1)

### SAVE CONFIG FILE
now = datetime.datetime.now()
nowstr = now.strftime("%Y%m%d_%H%M%S")
config["latest_run"] = nowstr
logdir = relpath(".vomix/log/vomix" + nowstr)

os.makedirs(logdir, exist_ok=True)
with open(os.path.join(logdir,  "config.json"), "w") as configf:
  json.dump(config, configf)

####################################
# Include & Add Targets Per Module #
####################################

targets = []

# fix symlink
if config["module"] == "symlink":
  samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/symlink.smk"
  targets = [relpath(".vomix/log/symlink_done.log")]

# pre-process
if config["module"] == "preprocess" or config["module"] == "end-to-end":
  samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  if config["decontam-host"]:
    include: "rules/preprocess-decontam.smk"
  else:
    include: "rules/preprocess.smk"
  targets += [relpath("preprocess/logs/done.log")]


# assembly 
if config["module"] == "assembly" or config["module"] == "end-to-end":
  samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/assembly.smk"
  targets += [relpath(os.path.join("assembly", assembler, "logs/done.log"))]


# viral contig ident
if config["module"] == "viral-identify" or config["module"] == "end-to-end":
  if config["samplelist"] != "":
    samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  if config["multitool"]:
    include: "rules/viral-multitool.smk"
  else:
    include: "rules/viral-identify.smk"
  if config["viral-binning"]:
    include: "rules/viral-binning.smk"
  if config["checkv-original"]:
    include: "rules/checkv.smk"
  else:
    include: "rules/checkv-pyhmmer.smk"
  if config["clustering-fast"]:
    include: "rules/clustering-fast.smk"
  else:
    include: "rules/clustering-sensitive.smk"
  targets += [relpath("identify/viral/logs/done.log")]

# viral refilter
if config["module"] == "viral-refilter":
  if config["samplelist"] != "":
    samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  if config["multitool"]:
    include: "rules/refilter-multitool.smk"
  else:
    include: "rules/refilter-genomad.smk"
  if config["viralbinning"]:
    include: "rules/viral-binning.smk"
  if config["checkv-original"]:
    include: "rules/checkv.smk"
  else:
    include: "rules/checkv-pyhmmer.smk"
  if config["clusteringfast"]:
    include: "rules/clustering-fast.smk"
  else:
    include: "rules/clustering-sensitive.smk"
  targets += [relpath("identify/viral/logs/done.log"), 
      relpath("identify/viral/logs/clustering-fast-done.log"), 
      relpath("identify/viral/logs/checkv-done.log")]

# checkv-pyhmmer
if config["module"] == "checkv-pyhmmer":
  if config["samplelist"] != "":
    samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  if config["checkv-original"]:
    include: "rules/checkv.smk"
  else:
    include: "rules/checkv-pyhmmer.smk"
  targets += [relpath("identify/viral/logs/checkv-done.log")]

# cluster fast
if config["module"] == "cluster-fast":
  if config["samplelist"] != "":
    samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/clustering-fast.smk"
  targets += [relpath("identify/viral/logs/clustering-fast-done.log")]

# viral taxonomy
if config["module"] == "viral-taxonomy" or config["module"] == "end-to-end":
  if config["samplelist"] != "":
    samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/viral-taxonomy.smk"
  targets += [relpath("taxonomy/viral/logs/done.log")]

# community (viral)
if config["module"] == "viral-community" or config["module"] == "end-to-end":
  samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/viral-community.smk"
  targets += [relpath("community/viral/logs/done.log")]

# binning (prokaryotic)
if config["module"] == "prok-binning" or config["module"] == "end-to-end":
  samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/prok-binning.smk"
  targets += [relpath("binning/prokaryotic/logs/done.log")]

# host 
if config["module"] == "host" or config["module"] == "end-to-end":
  if config["samplelist"] != "":
    samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  targets += [relpath("host/logs/done.log")]
  if config["hostprok"]:
    include: "rules/host-prok.smk"
  else:
    include: "rules/host-cherry.smk"

# community (prokaryotic)
if config["module"] == "prok-community":
  samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir, email, nowstr)
  include: "rules/prok-community.smk"
  targets += [relpath("community/metaphlan/logs/done.log")]

# annotation (prokaryotic)
if config["module"] == "viral-annotate":
  include: "rules/viral-annotate.smk"
  targets += [relpath("annotate/viral/logs/done.log")]

###############
# MASTER RULE #
###############
rule all:
  input: targets



### CHECK IF THERE ARE CO-ASSEMBLIES
if (len(assemblies.keys()) != len(samples.keys())) and assembler == "spades":
  console.print(Panel.fit(f"[bold]Error[/bold]: [dim] SPAdes does not currently support co-assemblies, you may use assembler='megahit' instead. Please read more at https://ablab.github.io/spades/input.html", title="Error", subtitle="SPAdes Co-assembly Support"))
  sys.exit(1)

import os
import glob
import sys
import platform
import pandas as pd
import snakemake
import json

from scripts.utility.parse_sample_list import parse_sample_list

from rich.console import Console
from rich.progress import Progress
from rich.layout import Layout
from rich.panel import Panel
console = Console()

configfile: "config/config.yml"
workdir: config["workdir"]
outdir = config["outdir"]

# Important utility functions

def cleanpath(f):
  """Function to clean the backlash at the end of directory path.
  Makes sure that all 'os.path.join's are consistent"""
  if f.endswith(os.sep):
    fi = f.rstrip(os.sep)
    return fi 
  else:
    return f 

def relpath(f):
  """Function to redirect all output to a relative path.
  This allows the snakemake to be flexible and process 
  multiple datasets at once without locking.""" 
  p = os.path.join(outdir, f)
  return p

# Create & format relative output directory
outdir = cleanpath(outdir) 
if not (os.path.exists(outdir) and os.path.exists(os.path.join(outdir, ".vomix"))):
  os.makedirs(os.path.join(outdir, ".vomix"), exist_ok=True)


### Set temporary dir
#if not os.getenv("TMPDIR"):
#  os.environ["TMPDIR"] = "tmp"
#  os.makedirs(os.environ["TMPDIR"], exist_ok=True)


### Set wildcard constraints
wildcard_constraints:
  sample_id = "[A-Za-z0-9_\-\.]+"


### Parse sample python dictionary
### It has the format samples[sample_name]  =  {'R1': 'path to R1',
#                                               'R2': 'path to R2',
#                                               'accession': 'accession id'}

# FUTURE ENHANCEMENT: MAKE WRAPPER PYTHON SCRIPTS TAKE DIFFERENT INPUTS PER MODEL 
# AND CREATE SAMPLES AND ASSEMBLIES DICTIONARIES BASED ON THE MODULE

datadir = cleanpath(config['datadir']) 
os.makedirs(datadir, exist_ok=True)
samples, assemblies = parse_sample_list(config["samplelist"], datadir, outdir)

###################
# Include Modules #
###################


if config["decontamhost"]:
  include: "rules/preprocessing-decontam.smk"
else:
  include: "rules/preprocessing.smk"
include: "rules/assembly.smk"
if config["genomadonly"]:
  include: "rules/genomad-only.smk"
else:
  include: "rules/viral-contigident.smk"
if config["viralbinning"]:
  include: "rules/viral-binning.smk"
include: "rules/checkv-pyhmmer.smk"
if config["clusteringfast"]:
  include: "rules/clustering-fast.smk"
else:
  include: "rules/clustering-sensitive.smk"
include: "rules/taxonomy.smk"
include: "rules/abundance.smk"
if config["prokaryotic"]:
  include: "rules/prokaryotic.smk"
if config["module"] == "host":
  if config["hostprok"]:
    include: "rules/host-prok.smk"
  else:
    include: "rules/host.smk"
include: "rules/metaphlan.smk"

##########################
# Add Targets Per Module #
##########################

targets = []

if config["module"] == "end-to-end":
  targets += [relpath("preprocess/logs/done.log")]
  targets += [relpath("assembly/logs/done.log")]
  targets += [relpath("viralcontigident/logs/done.log")]
  targets += [relpath("taxonomy/viral/logs/done.log")]
  targets += [relpath("abundance/logs/done.log")]

if config["module"] == "preprocess":
  targets += [relpath("preprocess/logs/done.log")]

if config["module"] == "assembly":
  targets += [relpath("assembly/logs/done.log")]

if config["module"] == "viral-contigident":
  targets += [relpath("viralcontigident/logs/done.log")]

if config["module"] == "taxonomy":
  targets += [relpath("taxonomy/viral/logs/done.log")]

if config["module"] == "abundance":
  targets += [relpath("abundance/logs/done.log")]

if config["prokaryotic"]:
  include: "rules/prokaryotic.smk"

if config["module"] == "host":
  if config["hostprok"]:
    include: "rules/host-prok.smk"
  else:
    include: "rules/host.smk"

if config["module"] == "community":
  targets += [relpath("community/metaphlan/logs/done.log")]

###############
# MASTER RULE #
###############
rule all:
  input: targets

